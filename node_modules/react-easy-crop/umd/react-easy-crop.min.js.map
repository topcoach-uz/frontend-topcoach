{"version":3,"file":"react-easy-crop.min.js","sources":["../../src/helpers.ts","../../src/Cropper.tsx"],"sourcesContent":["import { Area, MediaSize, Point, Size } from './types'\n\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotation\n */\nexport function getCropSize(\n  mediaWidth: number,\n  mediaHeight: number,\n  containerWidth: number,\n  containerHeight: number,\n  aspect: number,\n  rotation = 0\n): Size {\n  const { width, height } = rotateSize(mediaWidth, mediaHeight, rotation)\n  const fittingWidth = Math.min(width, containerWidth)\n  const fittingHeight = Math.min(height, containerHeight)\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight,\n    }\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect,\n  }\n}\n\n/**\n * Compute media zoom.\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\n */\nexport function getMediaZoom(mediaSize: MediaSize) {\n  // Take the axis with more pixels to improve accuracy\n  return mediaSize.width > mediaSize.height\n    ? mediaSize.width / mediaSize.naturalWidth\n    : mediaSize.height / mediaSize.naturalHeight\n}\n\n/**\n * Ensure a new media position stays in the crop area.\n */\nexport function restrictPosition(\n  position: Point,\n  mediaSize: Size,\n  cropSize: Size,\n  zoom: number,\n  rotation = 0\n): Point {\n  const { width, height } = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom),\n  }\n}\n\nfunction restrictPositionCoord(\n  position: number,\n  mediaSize: number,\n  cropSize: number,\n  zoom: number\n): number {\n  const maxPosition = (mediaSize * zoom) / 2 - cropSize / 2\n\n  return clamp(position, -maxPosition, maxPosition)\n}\n\nexport function getDistanceBetweenPoints(pointA: Point, pointB: Point) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2))\n}\n\nexport function getRotationBetweenPoints(pointA: Point, pointB: Point) {\n  return (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI\n}\n\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n */\nexport function computeCroppedArea(\n  crop: Point,\n  mediaSize: MediaSize,\n  cropSize: Size,\n  aspect: number,\n  zoom: number,\n  rotation = 0,\n  restrictPosition = true\n): { croppedAreaPercentages: Area; croppedAreaPixels: Area } {\n  // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n  const limitAreaFn = restrictPosition ? limitArea : noOp\n\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  // calculate the crop area in percentages\n  // in the rotated space\n  const croppedAreaPercentages = {\n    x: limitAreaFn(\n      100,\n      (((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width) *\n        100\n    ),\n    y: limitAreaFn(\n      100,\n      (((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) /\n        mediaBBoxSize.height) *\n        100\n    ),\n    width: limitAreaFn(100, ((cropSize.width / mediaBBoxSize.width) * 100) / zoom),\n    height: limitAreaFn(100, ((cropSize.height / mediaBBoxSize.height) * 100) / zoom),\n  }\n\n  // we compute the pixels size naively\n  const widthInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.width,\n      (croppedAreaPercentages.width * mediaNaturalBBoxSize.width) / 100\n    )\n  )\n  const heightInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.height,\n      (croppedAreaPercentages.height * mediaNaturalBBoxSize.height) / 100\n    )\n  )\n  const isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect\n\n  // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n  const sizePixels = isImgWiderThanHigh\n    ? {\n        width: Math.round(heightInPixels * aspect),\n        height: heightInPixels,\n      }\n    : {\n        width: widthInPixels,\n        height: Math.round(widthInPixels / aspect),\n      }\n\n  const croppedAreaPixels = {\n    ...sizePixels,\n    x: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.width - sizePixels.width,\n        (croppedAreaPercentages.x * mediaNaturalBBoxSize.width) / 100\n      )\n    ),\n    y: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.height - sizePixels.height,\n        (croppedAreaPercentages.y * mediaNaturalBBoxSize.height) / 100\n      )\n    ),\n  }\n\n  return { croppedAreaPercentages, croppedAreaPixels }\n}\n\n/**\n * Ensure the returned value is between 0 and max\n */\nfunction limitArea(max: number, value: number): number {\n  return Math.min(max, Math.max(0, value))\n}\n\nfunction noOp(_max: number, value: number) {\n  return value\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPercentages.\n */\nexport function getInitialCropFromCroppedAreaPercentages(\n  croppedAreaPercentages: Area,\n  mediaSize: MediaSize,\n  rotation: number,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n) {\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  // This is the inverse process of computeCroppedArea\n  const zoom = clamp(\n    (cropSize.width / mediaBBoxSize.width) * (100 / croppedAreaPercentages.width),\n    minZoom,\n    maxZoom\n  )\n\n  const crop = {\n    x:\n      (zoom * mediaBBoxSize.width) / 2 -\n      cropSize.width / 2 -\n      mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n    y:\n      (zoom * mediaBBoxSize.height) / 2 -\n      cropSize.height / 2 -\n      mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100),\n  }\n\n  return { crop, zoom }\n}\n\n/**\n * Compute zoom from the croppedAreaPixels\n */\nfunction getZoomFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  cropSize: Size\n): number {\n  const mediaZoom = getMediaZoom(mediaSize)\n\n  return cropSize.height > cropSize.width\n    ? cropSize.height / (croppedAreaPixels.height * mediaZoom)\n    : cropSize.width / (croppedAreaPixels.width * mediaZoom)\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPixels\n */\nexport function getInitialCropFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  rotation = 0,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n): { crop: Point; zoom: number } {\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  const zoom = clamp(\n    getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize),\n    minZoom,\n    maxZoom\n  )\n\n  const cropZoom =\n    cropSize.height > cropSize.width\n      ? cropSize.height / croppedAreaPixels.height\n      : cropSize.width / croppedAreaPixels.width\n\n  const crop = {\n    x:\n      ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y:\n      ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) *\n      cropZoom,\n  }\n  return { crop, zoom }\n}\n\n/**\n * Return the point that is the center of point a and b\n */\nexport function getCenter(a: Point, b: Point): Point {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2,\n  }\n}\n\nexport function getRadianAngle(degreeValue: number) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width: number, height: number, rotation: number): Size {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * Clamp value between min and max\n */\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Combine multiple class names into a single string.\n */\nexport function classNames(...args: (boolean | string | number | undefined | void | null)[]) {\n  return args\n    .filter((value) => {\n      if (typeof value === 'string' && value.length > 0) {\n        return true\n      }\n\n      return false\n    })\n    .join(' ')\n    .trim()\n}\n","import * as React from 'react'\nimport normalizeWheel from 'normalize-wheel'\nimport { Area, MediaSize, Point, Size, VideoSrc } from './types'\nimport {\n  getCropSize,\n  restrictPosition,\n  getDistanceBetweenPoints,\n  getRotationBetweenPoints,\n  computeCroppedArea,\n  getCenter,\n  getInitialCropFromCroppedAreaPixels,\n  getInitialCropFromCroppedAreaPercentages,\n  classNames,\n  clamp,\n} from './helpers'\nimport cssStyles from './styles.css'\n\nexport type CropperProps = {\n  image?: string\n  video?: string | VideoSrc[]\n  transform?: string\n  crop: Point\n  zoom: number\n  rotation: number\n  aspect: number\n  minZoom: number\n  maxZoom: number\n  cropShape: 'rect' | 'round'\n  cropSize?: Size\n  objectFit?: 'contain' | 'cover' | 'horizontal-cover' | 'vertical-cover'\n  showGrid?: boolean\n  zoomSpeed: number\n  zoomWithScroll?: boolean\n  onCropChange: (location: Point) => void\n  onZoomChange?: (zoom: number) => void\n  onRotationChange?: (rotation: number) => void\n  onCropComplete?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropAreaChange?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropSizeChange?: (cropSize: Size) => void\n  onInteractionStart?: () => void\n  onInteractionEnd?: () => void\n  onMediaLoaded?: (mediaSize: MediaSize) => void\n  style: {\n    containerStyle?: React.CSSProperties\n    mediaStyle?: React.CSSProperties\n    cropAreaStyle?: React.CSSProperties\n  }\n  classes: {\n    containerClassName?: string\n    mediaClassName?: string\n    cropAreaClassName?: string\n  }\n  restrictPosition: boolean\n  mediaProps: React.ImgHTMLAttributes<HTMLElement> | React.VideoHTMLAttributes<HTMLElement>\n  disableAutomaticStylesInjection?: boolean\n  initialCroppedAreaPixels?: Area\n  initialCroppedAreaPercentages?: Area\n  onTouchRequest?: (e: React.TouchEvent<HTMLDivElement>) => boolean\n  onWheelRequest?: (e: WheelEvent) => boolean\n  setImageRef?: (ref: React.RefObject<HTMLImageElement>) => void\n  setVideoRef?: (ref: React.RefObject<HTMLVideoElement>) => void\n  setMediaSize?: (size: MediaSize) => void\n  setCropSize?: (size: Size) => void\n  nonce?: string\n  keyboardStep: number\n}\n\ntype State = {\n  cropSize: Size | null\n  hasWheelJustStarted: boolean\n  mediaObjectFit: String | undefined\n}\n\nconst MIN_ZOOM = 1\nconst MAX_ZOOM = 3\nconst KEYBOARD_STEP = 1\n\ntype GestureEvent = UIEvent & {\n  rotation: number\n  scale: number\n  clientX: number\n  clientY: number\n}\n\nclass Cropper extends React.Component<CropperProps, State> {\n  static defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect' as const,\n    objectFit: 'contain' as const,\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true,\n    keyboardStep: KEYBOARD_STEP,\n  }\n\n  imageRef: React.RefObject<HTMLImageElement> = React.createRef()\n  videoRef: React.RefObject<HTMLVideoElement> = React.createRef()\n  containerPosition: Point = { x: 0, y: 0 }\n  containerRef: HTMLDivElement | null = null\n  styleRef: HTMLStyleElement | null = null\n  containerRect: DOMRect | null = null\n  mediaSize: MediaSize = { width: 0, height: 0, naturalWidth: 0, naturalHeight: 0 }\n  dragStartPosition: Point = { x: 0, y: 0 }\n  dragStartCrop: Point = { x: 0, y: 0 }\n  gestureZoomStart = 0\n  gestureRotationStart = 0\n  isTouching = false\n  lastPinchDistance = 0\n  lastPinchRotation = 0\n  rafDragTimeout: number | null = null\n  rafPinchTimeout: number | null = null\n  wheelTimer: number | null = null\n  currentDoc: Document | null = typeof document !== 'undefined' ? document : null\n  currentWindow: Window | null = typeof window !== 'undefined' ? window : null\n  resizeObserver: ResizeObserver | null = null\n\n  state: State = {\n    cropSize: null,\n    hasWheelJustStarted: false,\n    mediaObjectFit: undefined,\n  }\n\n  componentDidMount() {\n    if (!this.currentDoc || !this.currentWindow) return\n    if (this.containerRef) {\n      if (this.containerRef.ownerDocument) {\n        this.currentDoc = this.containerRef.ownerDocument\n      }\n      if (this.currentDoc.defaultView) {\n        this.currentWindow = this.currentDoc.defaultView\n      }\n\n      this.initResizeObserver()\n      // only add window resize listener if ResizeObserver is not supported. Otherwise, it would be redundant\n      if (typeof window.ResizeObserver === 'undefined') {\n        this.currentWindow.addEventListener('resize', this.computeSizes)\n      }\n      this.props.zoomWithScroll &&\n        this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n      this.containerRef.addEventListener('gesturestart', this.onGestureStart as EventListener)\n    }\n\n    this.currentDoc.addEventListener('scroll', this.onScroll)\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = this.currentDoc.createElement('style')\n      this.styleRef.setAttribute('type', 'text/css')\n      if (this.props.nonce) {\n        this.styleRef.setAttribute('nonce', this.props.nonce)\n      }\n      this.styleRef.innerHTML = cssStyles\n      this.currentDoc.head.appendChild(this.styleRef)\n    }\n\n    // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n    if (this.imageRef.current && this.imageRef.current.complete) {\n      this.onMediaLoad()\n    }\n\n    // set image and video refs in the parent if the callbacks exist\n    if (this.props.setImageRef) {\n      this.props.setImageRef(this.imageRef)\n    }\n\n    if (this.props.setVideoRef) {\n      this.props.setVideoRef(this.videoRef)\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.currentDoc || !this.currentWindow) return\n    if (typeof window.ResizeObserver === 'undefined') {\n      this.currentWindow.removeEventListener('resize', this.computeSizes)\n    }\n    this.resizeObserver?.disconnect()\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari)\n    }\n\n    if (this.styleRef) {\n      this.styleRef.parentNode?.removeChild(this.styleRef)\n    }\n\n    this.cleanEvents()\n    this.props.zoomWithScroll && this.clearScrollEvent()\n  }\n\n  componentDidUpdate(prevProps: CropperProps) {\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes()\n      this.recomputeCropPosition()\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes()\n    } else if (prevProps.objectFit !== this.props.objectFit) {\n      this.computeSizes()\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition()\n    } else if (\n      prevProps.cropSize?.height !== this.props.cropSize?.height ||\n      prevProps.cropSize?.width !== this.props.cropSize?.width\n    ) {\n      this.computeSizes()\n    } else if (\n      prevProps.crop?.x !== this.props.crop?.x ||\n      prevProps.crop?.y !== this.props.crop?.y\n    ) {\n      this.emitCropAreaChange()\n    }\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll\n        ? this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n        : this.clearScrollEvent()\n    }\n    if (prevProps.video !== this.props.video) {\n      this.videoRef.current?.load()\n    }\n\n    const objectFit = this.getObjectFit()\n    if (objectFit !== this.state.mediaObjectFit) {\n      this.setState({ mediaObjectFit: objectFit }, this.computeSizes)\n    }\n  }\n\n  initResizeObserver = () => {\n    if (typeof window.ResizeObserver === 'undefined' || !this.containerRef) {\n      return\n    }\n    let isFirstResize = true\n    this.resizeObserver = new window.ResizeObserver((entries) => {\n      if (isFirstResize) {\n        isFirstResize = false // observe() is called on mount, we don't want to trigger a recompute on mount\n        return\n      }\n      this.computeSizes()\n    })\n    this.resizeObserver.observe(this.containerRef)\n  }\n\n  // this is to prevent Safari on iOS >= 10 to zoom the page\n  preventZoomSafari = (e: Event) => e.preventDefault()\n\n  cleanEvents = () => {\n    if (!this.currentDoc) return\n    this.currentDoc.removeEventListener('mousemove', this.onMouseMove)\n    this.currentDoc.removeEventListener('mouseup', this.onDragStopped)\n    this.currentDoc.removeEventListener('touchmove', this.onTouchMove)\n    this.currentDoc.removeEventListener('touchend', this.onDragStopped)\n    this.currentDoc.removeEventListener('gesturemove', this.onGestureMove as EventListener)\n    this.currentDoc.removeEventListener('gestureend', this.onGestureEnd as EventListener)\n    this.currentDoc.removeEventListener('scroll', this.onScroll)\n  }\n\n  clearScrollEvent = () => {\n    if (this.containerRef) this.containerRef.removeEventListener('wheel', this.onWheel)\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n  }\n\n  onMediaLoad = () => {\n    const cropSize = this.computeSizes()\n\n    if (cropSize) {\n      this.emitCropData()\n      this.setInitialCrop(cropSize)\n    }\n\n    if (this.props.onMediaLoaded) {\n      this.props.onMediaLoaded(this.mediaSize)\n    }\n  }\n\n  setInitialCrop = (cropSize: Size) => {\n    if (this.props.initialCroppedAreaPercentages) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPercentages(\n        this.props.initialCroppedAreaPercentages,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    } else if (this.props.initialCroppedAreaPixels) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPixels(\n        this.props.initialCroppedAreaPixels,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    }\n  }\n\n  getAspect() {\n    const { cropSize, aspect } = this.props\n    if (cropSize) {\n      return cropSize.width / cropSize.height\n    }\n    return aspect\n  }\n\n  getObjectFit() {\n    if (this.props.objectFit === 'cover') {\n      const mediaRef = this.imageRef.current || this.videoRef.current\n\n      if (mediaRef && this.containerRef) {\n        this.containerRect = this.containerRef.getBoundingClientRect()\n        const containerAspect = this.containerRect.width / this.containerRect.height\n        const naturalWidth =\n          this.imageRef.current?.naturalWidth || this.videoRef.current?.videoWidth || 0\n        const naturalHeight =\n          this.imageRef.current?.naturalHeight || this.videoRef.current?.videoHeight || 0\n        const mediaAspect = naturalWidth / naturalHeight\n\n        return mediaAspect < containerAspect ? 'horizontal-cover' : 'vertical-cover'\n      }\n      return 'horizontal-cover'\n    }\n\n    return this.props.objectFit\n  }\n\n  computeSizes = () => {\n    const mediaRef = this.imageRef.current || this.videoRef.current\n\n    if (mediaRef && this.containerRef) {\n      this.containerRect = this.containerRef.getBoundingClientRect()\n      this.saveContainerPosition()\n      const containerAspect = this.containerRect.width / this.containerRect.height\n      const naturalWidth =\n        this.imageRef.current?.naturalWidth || this.videoRef.current?.videoWidth || 0\n      const naturalHeight =\n        this.imageRef.current?.naturalHeight || this.videoRef.current?.videoHeight || 0\n      const isMediaScaledDown =\n        mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight\n      const mediaAspect = naturalWidth / naturalHeight\n\n      // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n      // as the values they report are rounded. That will result in precision losses\n      // when calculating zoom. We use the fact that the media is positionned relative\n      // to the container. That allows us to use the container's dimensions\n      // and natural aspect ratio of the media to calculate accurate media size.\n      // However, for this to work, the container should not be rotated\n      let renderedMediaSize: Size\n\n      if (isMediaScaledDown) {\n        switch (this.state.mediaObjectFit) {\n          default:\n          case 'contain':\n            renderedMediaSize =\n              containerAspect > mediaAspect\n                ? {\n                    width: this.containerRect.height * mediaAspect,\n                    height: this.containerRect.height,\n                  }\n                : {\n                    width: this.containerRect.width,\n                    height: this.containerRect.width / mediaAspect,\n                  }\n            break\n          case 'horizontal-cover':\n            renderedMediaSize = {\n              width: this.containerRect.width,\n              height: this.containerRect.width / mediaAspect,\n            }\n            break\n          case 'vertical-cover':\n            renderedMediaSize = {\n              width: this.containerRect.height * mediaAspect,\n              height: this.containerRect.height,\n            }\n            break\n        }\n      } else {\n        renderedMediaSize = {\n          width: mediaRef.offsetWidth,\n          height: mediaRef.offsetHeight,\n        }\n      }\n\n      this.mediaSize = {\n        ...renderedMediaSize,\n        naturalWidth,\n        naturalHeight,\n      }\n\n      // set media size in the parent\n      if (this.props.setMediaSize) {\n        this.props.setMediaSize(this.mediaSize)\n      }\n\n      const cropSize = this.props.cropSize\n        ? this.props.cropSize\n        : getCropSize(\n            this.mediaSize.width,\n            this.mediaSize.height,\n            this.containerRect.width,\n            this.containerRect.height,\n            this.props.aspect,\n            this.props.rotation\n          )\n\n      if (\n        this.state.cropSize?.height !== cropSize.height ||\n        this.state.cropSize?.width !== cropSize.width\n      ) {\n        this.props.onCropSizeChange && this.props.onCropSizeChange(cropSize)\n      }\n      this.setState({ cropSize }, this.recomputeCropPosition)\n      // pass crop size to parent\n      if (this.props.setCropSize) {\n        this.props.setCropSize(cropSize)\n      }\n\n      return cropSize\n    }\n  }\n\n  saveContainerPosition = () => {\n    if (this.containerRef) {\n      const bounds = this.containerRef.getBoundingClientRect()\n      this.containerPosition = { x: bounds.left, y: bounds.top }\n    }\n  }\n\n  static getMousePoint = (e: MouseEvent | React.MouseEvent | GestureEvent) => ({\n    x: Number(e.clientX),\n    y: Number(e.clientY),\n  })\n\n  static getTouchPoint = (touch: Touch | React.Touch) => ({\n    x: Number(touch.clientX),\n    y: Number(touch.clientY),\n  })\n\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!this.currentDoc) return\n    e.preventDefault()\n    this.currentDoc.addEventListener('mousemove', this.onMouseMove)\n    this.currentDoc.addEventListener('mouseup', this.onDragStopped)\n    this.saveContainerPosition()\n    this.onDragStart(Cropper.getMousePoint(e))\n  }\n\n  onMouseMove = (e: MouseEvent) => this.onDrag(Cropper.getMousePoint(e))\n\n  onScroll = (e: Event) => {\n    if (!this.currentDoc) return\n    e.preventDefault()\n    this.saveContainerPosition()\n  }\n\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    if (!this.currentDoc) return\n    this.isTouching = true\n    if (this.props.onTouchRequest && !this.props.onTouchRequest(e)) {\n      return\n    }\n\n    this.currentDoc.addEventListener('touchmove', this.onTouchMove, { passive: false }) // iOS 11 now defaults to passive: true\n    this.currentDoc.addEventListener('touchend', this.onDragStopped)\n\n    this.saveContainerPosition()\n\n    if (e.touches.length === 2) {\n      this.onPinchStart(e)\n    } else if (e.touches.length === 1) {\n      this.onDragStart(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onTouchMove = (e: TouchEvent) => {\n    // Prevent whole page from scrolling on iOS.\n    e.preventDefault()\n    if (e.touches.length === 2) {\n      this.onPinchMove(e)\n    } else if (e.touches.length === 1) {\n      this.onDrag(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onGestureStart = (e: GestureEvent) => {\n    if (!this.currentDoc) return\n    e.preventDefault()\n    this.currentDoc.addEventListener('gesturechange', this.onGestureMove as EventListener)\n    this.currentDoc.addEventListener('gestureend', this.onGestureEnd as EventListener)\n    this.gestureZoomStart = this.props.zoom\n    this.gestureRotationStart = this.props.rotation\n  }\n\n  onGestureMove = (e: GestureEvent) => {\n    e.preventDefault()\n    if (this.isTouching) {\n      // this is to avoid conflict between gesture and touch events\n      return\n    }\n\n    const point = Cropper.getMousePoint(e)\n    const newZoom = this.gestureZoomStart - 1 + e.scale\n    this.setNewZoom(newZoom, point, { shouldUpdatePosition: true })\n    if (this.props.onRotationChange) {\n      const newRotation = this.gestureRotationStart + e.rotation\n      this.props.onRotationChange(newRotation)\n    }\n  }\n\n  onGestureEnd = (e: GestureEvent) => {\n    this.cleanEvents()\n  }\n\n  onDragStart = ({ x, y }: Point) => {\n    this.dragStartPosition = { x, y }\n    this.dragStartCrop = { ...this.props.crop }\n    this.props.onInteractionStart?.()\n  }\n\n  onDrag = ({ x, y }: Point) => {\n    if (!this.currentWindow) return\n    if (this.rafDragTimeout) this.currentWindow.cancelAnimationFrame(this.rafDragTimeout)\n\n    this.rafDragTimeout = this.currentWindow.requestAnimationFrame(() => {\n      if (!this.state.cropSize) return\n      if (x === undefined || y === undefined) return\n      const offsetX = x - this.dragStartPosition.x\n      const offsetY = y - this.dragStartPosition.y\n      const requestedPosition = {\n        x: this.dragStartCrop.x + offsetX,\n        y: this.dragStartCrop.y + offsetY,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            this.props.zoom,\n            this.props.rotation\n          )\n        : requestedPosition\n      this.props.onCropChange(newPosition)\n    })\n  }\n\n  onDragStopped = () => {\n    this.isTouching = false\n    this.cleanEvents()\n    this.emitCropData()\n    this.props.onInteractionEnd?.()\n  }\n\n  onPinchStart(e: React.TouchEvent<HTMLDivElement>) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB)\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB)\n    this.onDragStart(getCenter(pointA, pointB))\n  }\n\n  onPinchMove(e: TouchEvent) {\n    if (!this.currentDoc || !this.currentWindow) return\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    const center = getCenter(pointA, pointB)\n    this.onDrag(center)\n\n    if (this.rafPinchTimeout) this.currentWindow.cancelAnimationFrame(this.rafPinchTimeout)\n    this.rafPinchTimeout = this.currentWindow.requestAnimationFrame(() => {\n      const distance = getDistanceBetweenPoints(pointA, pointB)\n      const newZoom = this.props.zoom * (distance / this.lastPinchDistance)\n      this.setNewZoom(newZoom, center, { shouldUpdatePosition: false })\n      this.lastPinchDistance = distance\n\n      const rotation = getRotationBetweenPoints(pointA, pointB)\n      const newRotation = this.props.rotation + (rotation - this.lastPinchRotation)\n      this.props.onRotationChange && this.props.onRotationChange(newRotation)\n      this.lastPinchRotation = rotation\n    })\n  }\n\n  onWheel = (e: WheelEvent) => {\n    if (!this.currentWindow) return\n    if (this.props.onWheelRequest && !this.props.onWheelRequest(e)) {\n      return\n    }\n\n    e.preventDefault()\n    const point = Cropper.getMousePoint(e)\n    const { pixelY } = normalizeWheel(e)\n    const newZoom = this.props.zoom - (pixelY * this.props.zoomSpeed) / 200\n    this.setNewZoom(newZoom, point, { shouldUpdatePosition: true })\n\n    if (!this.state.hasWheelJustStarted) {\n      this.setState({ hasWheelJustStarted: true }, () => this.props.onInteractionStart?.())\n    }\n\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n    this.wheelTimer = this.currentWindow.setTimeout(\n      () => this.setState({ hasWheelJustStarted: false }, () => this.props.onInteractionEnd?.()),\n      250\n    )\n  }\n\n  getPointOnContainer = ({ x, y }: Point, containerTopLeft: Point): Point => {\n    if (!this.containerRect) {\n      throw new Error('The Cropper is not mounted')\n    }\n    return {\n      x: this.containerRect.width / 2 - (x - containerTopLeft.x),\n      y: this.containerRect.height / 2 - (y - containerTopLeft.y),\n    }\n  }\n\n  getPointOnMedia = ({ x, y }: Point) => {\n    const { crop, zoom } = this.props\n    return {\n      x: (x + crop.x) / zoom,\n      y: (y + crop.y) / zoom,\n    }\n  }\n\n  setNewZoom = (zoom: number, point: Point, { shouldUpdatePosition = true } = {}) => {\n    if (!this.state.cropSize || !this.props.onZoomChange) return\n\n    const newZoom = clamp(zoom, this.props.minZoom, this.props.maxZoom)\n\n    if (shouldUpdatePosition) {\n      const zoomPoint = this.getPointOnContainer(point, this.containerPosition)\n      const zoomTarget = this.getPointOnMedia(zoomPoint)\n      const requestedPosition = {\n        x: zoomTarget.x * newZoom - zoomPoint.x,\n        y: zoomTarget.y * newZoom - zoomPoint.y,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            newZoom,\n            this.props.rotation\n          )\n        : requestedPosition\n\n      this.props.onCropChange(newPosition)\n    }\n    this.props.onZoomChange(newZoom)\n  }\n\n  getCropData = () => {\n    if (!this.state.cropSize) {\n      return null\n    }\n\n    // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ValentinH/react-easy-crop/issues/6)\n    const restrictedPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n    return computeCroppedArea(\n      restrictedPosition,\n      this.mediaSize,\n      this.state.cropSize,\n      this.getAspect(),\n      this.props.zoom,\n      this.props.rotation,\n      this.props.restrictPosition\n    )\n  }\n\n  emitCropData = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropComplete) {\n      this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels)\n    }\n\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  emitCropAreaChange = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  recomputeCropPosition = () => {\n    if (!this.state.cropSize) return\n\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n\n    this.props.onCropChange(newPosition)\n    this.emitCropData()\n  }\n\n  onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const { crop, onCropChange, keyboardStep, zoom, rotation } = this.props\n    let step = keyboardStep\n\n    if (!this.state.cropSize) return\n\n    // if the shift key is pressed, reduce the step to allow finer control\n    if (event.shiftKey) {\n      step *= 0.2\n    }\n\n    let newCrop = { ...crop }\n\n    switch (event.key) {\n      case 'ArrowUp':\n        newCrop.y -= step\n        event.preventDefault()\n        break\n      case 'ArrowDown':\n        newCrop.y += step\n        event.preventDefault()\n        break\n      case 'ArrowLeft':\n        newCrop.x -= step\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n        newCrop.x += step\n        event.preventDefault()\n        break\n      default:\n        return\n    }\n\n    if (this.props.restrictPosition) {\n      newCrop = restrictPosition(newCrop, this.mediaSize, this.state.cropSize, zoom, rotation)\n    }\n\n    onCropChange(newCrop)\n  }\n\n  render() {\n    const {\n      image,\n      video,\n      mediaProps,\n      transform,\n      crop: { x, y },\n      rotation,\n      zoom,\n      cropShape,\n      showGrid,\n      style: { containerStyle, cropAreaStyle, mediaStyle },\n      classes: { containerClassName, cropAreaClassName, mediaClassName },\n    } = this.props\n\n    const objectFit = this.state.mediaObjectFit ?? this.getObjectFit()\n\n    return (\n      <div\n        onMouseDown={this.onMouseDown}\n        onTouchStart={this.onTouchStart}\n        ref={(el) => (this.containerRef = el)}\n        data-testid=\"container\"\n        style={containerStyle}\n        className={classNames('reactEasyCrop_Container', containerClassName)}\n      >\n        {image ? (\n          <img\n            alt=\"\"\n            className={classNames(\n              'reactEasyCrop_Image',\n              objectFit === 'contain' && 'reactEasyCrop_Contain',\n              objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n              objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n              mediaClassName\n            )}\n            {...(mediaProps as React.ImgHTMLAttributes<HTMLElement>)}\n            src={image}\n            ref={this.imageRef}\n            style={{\n              ...mediaStyle,\n              transform:\n                transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n            }}\n            onLoad={this.onMediaLoad}\n          />\n        ) : (\n          video && (\n            <video\n              autoPlay\n              playsInline\n              loop\n              muted={true}\n              className={classNames(\n                'reactEasyCrop_Video',\n                objectFit === 'contain' && 'reactEasyCrop_Contain',\n                objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n                objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n                mediaClassName\n              )}\n              {...mediaProps}\n              ref={this.videoRef}\n              onLoadedMetadata={this.onMediaLoad}\n              style={{\n                ...mediaStyle,\n                transform:\n                  transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n              }}\n              controls={false}\n            >\n              {(Array.isArray(video) ? video : [{ src: video }]).map((item) => (\n                <source key={item.src} {...item} />\n              ))}\n            </video>\n          )\n        )}\n        {this.state.cropSize && (\n          <div\n            style={{\n              ...cropAreaStyle,\n              width: this.state.cropSize.width,\n              height: this.state.cropSize.height,\n            }}\n            tabIndex={0}\n            onKeyDown={this.onKeyDown}\n            data-testid=\"cropper\"\n            className={classNames(\n              'reactEasyCrop_CropArea',\n              cropShape === 'round' && 'reactEasyCrop_CropAreaRound',\n              showGrid && 'reactEasyCrop_CropAreaGrid',\n              cropAreaClassName\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Cropper\n"],"names":["getCropSize","mediaWidth","mediaHeight","containerWidth","containerHeight","aspect","rotation","_a","rotateSize","width","height","fittingWidth","Math","min","fittingHeight","restrictPosition","position","mediaSize","cropSize","zoom","x","restrictPositionCoord","y","maxPosition","clamp","getDistanceBetweenPoints","pointA","pointB","sqrt","pow","getRotationBetweenPoints","atan2","PI","computeCroppedArea","crop","limitAreaFn","limitArea","noOp","mediaBBoxSize","mediaNaturalBBoxSize","naturalWidth","naturalHeight","croppedAreaPercentages","widthInPixels","round","heightInPixels","sizePixels","croppedAreaPixels","__assign","max","value","_max","getInitialCropFromCroppedAreaPercentages","minZoom","maxZoom","getInitialCropFromCroppedAreaPixels","mediaZoom","getMediaZoom","getZoomFromCroppedAreaPixels","cropZoom","getCenter","a","b","rotRad","abs","cos","sin","classNames","args","_i","arguments","length","filter","join","trim","Cropper","_super","_this","apply","this","imageRef","React","createRef","videoRef","containerPosition","containerRef","styleRef","containerRect","dragStartPosition","dragStartCrop","gestureZoomStart","gestureRotationStart","isTouching","lastPinchDistance","lastPinchRotation","rafDragTimeout","rafPinchTimeout","wheelTimer","currentDoc","document","currentWindow","window","resizeObserver","state","hasWheelJustStarted","mediaObjectFit","undefined","initResizeObserver","ResizeObserver","isFirstResize","entries","computeSizes","observe","preventZoomSafari","e","preventDefault","cleanEvents","removeEventListener","onMouseMove","onDragStopped","onTouchMove","onGestureMove","onGestureEnd","onScroll","clearScrollEvent","onWheel","clearTimeout","onMediaLoad","emitCropData","setInitialCrop","props","onMediaLoaded","initialCroppedAreaPercentages","onCropChange","onZoomChange","initialCroppedAreaPixels","_b","mediaRef","current","getBoundingClientRect","saveContainerPosition","containerAspect","videoWidth","_c","_d","videoHeight","mediaAspect","renderedMediaSize","offsetWidth","offsetHeight","setMediaSize","_e","_f","onCropSizeChange","setState","recomputeCropPosition","setCropSize","bounds","left","top","onMouseDown","addEventListener","onDragStart","getMousePoint","onDrag","onTouchStart","onTouchRequest","passive","touches","onPinchStart","getTouchPoint","onPinchMove","onGestureStart","point","newZoom","scale","setNewZoom","shouldUpdatePosition","onRotationChange","newRotation","onInteractionStart","cancelAnimationFrame","requestAnimationFrame","offsetX","offsetY","requestedPosition","newPosition","onInteractionEnd","onWheelRequest","pixelY","normalizeWheel","zoomSpeed","call","setTimeout","getPointOnContainer","containerTopLeft","Error","getPointOnMedia","zoomPoint","zoomTarget","getCropData","getAspect","cropData","onCropComplete","onCropAreaChange","emitCropAreaChange","onKeyDown","event","keyboardStep","step","shiftKey","newCrop","key","__extends","prototype","componentDidMount","ownerDocument","defaultView","zoomWithScroll","disableAutomaticStylesInjection","createElement","setAttribute","nonce","innerHTML","head","appendChild","complete","setImageRef","setVideoRef","componentWillUnmount","disconnect","parentNode","removeChild","componentDidUpdate","prevProps","objectFit","_g","_h","video","_j","load","getObjectFit","center","distance","render","image","mediaProps","transform","cropShape","showGrid","style","containerStyle","cropAreaStyle","mediaStyle","classes","containerClassName","cropAreaClassName","mediaClassName","ref","el","data-testid","className","alt","src","concat","onLoad","autoPlay","playsInline","loop","muted","onLoadedMetadata","controls","Array","isArray","map","item","tabIndex","defaultProps","Number","clientX","clientY","touch","Component"],"mappings":"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"}